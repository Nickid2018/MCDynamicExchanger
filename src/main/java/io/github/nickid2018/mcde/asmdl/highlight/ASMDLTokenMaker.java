/* The following code was generated by JFlex 1.4.1 on 22-9-29 下午11:05 */

package io.github.nickid2018.mcde.asmdl.highlight;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

import javax.swing.text.Segment;
import java.io.IOException;
import java.io.Reader;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 22-9-29 下午11:05 from the specification file
 * <tt>D:/MCDynamicExchanger/src/main/java/io/github/nickid2018/mcde/asmdl/highlight/ASMDLTokenMaker.flex</tt>
 */
public class ASMDLTokenMaker extends AbstractJFlexCTokenMaker {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\5\1\47\1\0\1\5\23\0\1\5\2\0\1\10\4\0" +
                    "\2\7\2\0\1\0\1\0\1\6\1\4\1\44\1\42\1\43\1\46" +
                    "\1\46\1\46\4\2\1\0\1\4\5\0\32\1\1\7\1\0\1\7" +
                    "\1\0\1\3\1\0\1\13\1\25\1\11\1\22\1\16\1\23\1\31" +
                    "\1\20\1\24\1\45\1\40\1\12\1\15\1\32\1\21\1\34\1\41" +
                    "\1\26\1\14\1\17\1\27\1\30\1\37\1\33\1\35\1\36\1\7" +
                    "\1\0\1\7\uff82\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\2\1\1\2\1\3\1\4\1\5\23\1\1\6" +
                    "\1\0\113\1\1\7\17\1\1\10\5\1\1\10\35\1" +
                    "\1\10\15\1\1\11\4\1\1\10\7\1\1\10\2\1" +
                    "\1\10\4\1\1\11\31\1\1\12\11\1\1\10\244\1" +
                    "\1\12\24\1";

    private static int[] zzUnpackAction() {
        int[] result = new int[412];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\50\0\120\0\170\0\240\0\50\0\310\0\360" +
                    "\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230" +
                    "\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370" +
                    "\0\u0398\0\u03c0\0\50\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488" +
                    "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8" +
                    "\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708" +
                    "\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848" +
                    "\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988" +
                    "\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8" +
                    "\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08" +
                    "\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48" +
                    "\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88" +
                    "\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u03e8" +
                    "\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0" +
                    "\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220" +
                    "\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\120\0\u1310\0\u1338" +
                    "\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478" +
                    "\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8" +
                    "\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8" +
                    "\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838" +
                    "\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928\0\u1950\0\u1978" +
                    "\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8" +
                    "\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8" +
                    "\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8\0\120\0\u1d10" +
                    "\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\u1a90\0\u1e28" +
                    "\0\u1e50\0\u1e78\0\u1ea0\0\u1bd0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40" +
                    "\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\u2058\0\u2080" +
                    "\0\120\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170\0\u2198" +
                    "\0\u21c0\0\u21e8\0\u2210\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8" +
                    "\0\u2300\0\u2328\0\u2350\0\u2378\0\u23a0\0\u23c8\0\u23f0\0\u2418" +
                    "\0\u2440\0\u2468\0\u2490\0\u24b8\0\u24e0\0\u2508\0\u2530\0\u2558" +
                    "\0\u2580\0\u25a8\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670\0\u2698" +
                    "\0\u26c0\0\u26e8\0\u2710\0\u2738\0\u2760\0\u2788\0\u27b0\0\u27d8" +
                    "\0\u2800\0\u2828\0\u2850\0\u2878\0\u28a0\0\u28c8\0\u28f0\0\u2918" +
                    "\0\u2940\0\u2968\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58" +
                    "\0\u2a80\0\u2aa8\0\u2ad0\0\u2af8\0\u2b20\0\u2b48\0\u2b70\0\u2b98" +
                    "\0\u2bc0\0\u2be8\0\u2c10\0\u2c38\0\u2c60\0\u2c88\0\u2cb0\0\u2cd8" +
                    "\0\u2d00\0\u2d28\0\u2d50\0\u2d78\0\u2da0\0\u2dc8\0\u2df0\0\u2e18" +
                    "\0\u2e40\0\u2e68\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08\0\u2f30\0\u2f58" +
                    "\0\u2f80\0\u2fa8\0\u2fd0\0\u2ff8\0\u3020\0\u3048\0\u3070\0\u3098" +
                    "\0\u30c0\0\u30e8\0\u3110\0\u3138\0\u3160\0\u3188\0\u31b0\0\u31d8" +
                    "\0\u3200\0\u3228\0\u3250\0\u3278\0\u32a0\0\u32c8\0\u32f0\0\u3318" +
                    "\0\u3340\0\u3368\0\u3390\0\u33b8\0\u33e0\0\u3408\0\u3430\0\u3458" +
                    "\0\u3480\0\u34a8\0\u34d0\0\u34f8\0\u3520\0\u3548\0\u3570\0\u3598" +
                    "\0\u35c0\0\u35e8\0\u3610\0\u3638\0\u3660\0\u3688\0\u36b0\0\u36d8" +
                    "\0\u3700\0\u3728\0\u3750\0\u3778\0\u37a0\0\u37c8\0\u37f0\0\u3818" +
                    "\0\u3840\0\u3868\0\u3890\0\u38b8\0\u38e0\0\u3908\0\u3930\0\u3958" +
                    "\0\u3980\0\u39a8\0\u39d0\0\u39f8\0\u3a20\0\u3a48\0\u3a70\0\u3a98" +
                    "\0\u3ac0\0\u3ae8\0\u3b10\0\u3b38\0\u3b60\0\u3b88\0\u3bb0\0\u3bd8" +
                    "\0\u3c00\0\u3c28\0\u3c50\0\u3c78\0\u3ca0\0\u3cc8\0\u3cf0\0\u3d18" +
                    "\0\u3d40\0\u3d68\0\u3d90\0\u3db8\0\u3de0\0\u3e08\0\u3e30\0\u3e58" +
                    "\0\u3e80\0\u3ea8\0\u3ed0\0\u3ef8";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[412];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\3\1\2\1\5\1\2\1\6" +
                    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16" +
                    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\3" +
                    "\1\26\1\27\1\30\1\3\1\31\5\3\3\4\1\32" +
                    "\1\4\1\33\51\0\4\3\4\0\36\3\3\0\1\4" +
                    "\3\0\1\34\33\0\3\4\1\0\1\4\6\0\1\5" +
                    "\42\0\47\7\2\0\4\3\4\0\1\3\1\35\1\36" +
                    "\4\3\1\37\1\40\25\3\2\0\4\3\4\0\1\41" +
                    "\1\42\1\43\1\44\1\45\3\3\1\46\1\47\1\3" +
                    "\1\50\1\3\1\51\1\52\2\3\1\53\10\3\1\54" +
                    "\3\3\2\0\4\3\4\0\1\55\1\42\1\36\1\56" +
                    "\2\3\1\57\5\3\1\60\1\61\3\3\1\62\14\3" +
                    "\2\0\4\3\4\0\2\3\1\36\3\3\1\63\1\64" +
                    "\3\3\1\65\2\3\1\66\5\3\1\67\1\3\1\70" +
                    "\7\3\2\0\4\3\4\0\5\3\1\71\2\3\1\72" +
                    "\5\3\1\73\17\3\2\0\4\3\4\0\21\3\1\74" +
                    "\1\75\13\3\2\0\4\3\4\0\2\3\1\76\4\3" +
                    "\1\77\5\3\1\100\6\3\1\101\11\3\2\0\4\3" +
                    "\4\0\2\3\1\102\33\3\2\0\4\3\4\0\16\3" +
                    "\1\103\17\3\2\0\4\3\4\0\1\104\1\42\1\105" +
                    "\1\106\1\45\3\3\1\107\1\110\3\3\1\51\1\111" +
                    "\2\3\1\53\10\3\1\112\3\3\2\0\4\3\4\0" +
                    "\1\113\1\114\1\115\1\106\1\45\4\3\1\110\1\3" +
                    "\1\116\1\3\1\51\3\3\1\53\10\3\1\117\3\3" +
                    "\2\0\4\3\4\0\1\120\1\42\1\105\1\44\1\121" +
                    "\4\3\1\110\1\122\1\123\1\3\1\51\1\52\2\3" +
                    "\1\124\10\3\1\125\3\3\2\0\4\3\4\0\2\3" +
                    "\1\36\5\3\1\126\2\3\1\127\1\3\1\130\6\3" +
                    "\1\131\11\3\2\0\4\3\4\0\5\3\1\132\30\3" +
                    "\2\0\4\3\4\0\2\3\1\133\5\3\1\134\25\3" +
                    "\2\0\4\3\4\0\5\3\1\135\2\3\1\136\25\3" +
                    "\2\0\4\3\4\0\2\3\1\137\2\3\1\140\2\3" +
                    "\1\141\25\3\2\0\4\3\4\0\2\3\1\142\2\3" +
                    "\1\143\2\3\1\144\4\3\1\145\1\146\17\3\2\0" +
                    "\4\3\4\0\3\3\1\147\32\3\3\0\1\150\37\0" +
                    "\3\150\1\0\1\150\2\0\4\3\4\0\2\3\1\151" +
                    "\33\3\2\0\4\3\4\0\1\3\1\42\1\3\1\56" +
                    "\32\3\2\0\4\3\4\0\2\3\1\152\2\3\1\153" +
                    "\30\3\2\0\4\3\4\0\21\3\1\154\14\3\2\0" +
                    "\4\3\4\0\4\3\1\141\3\3\1\155\25\3\2\0" +
                    "\4\3\4\0\10\3\1\156\25\3\2\0\4\3\4\0" +
                    "\1\3\1\42\1\3\1\56\5\3\1\157\2\3\1\160" +
                    "\21\3\2\0\4\3\4\0\6\3\1\161\1\162\6\3" +
                    "\1\163\17\3\2\0\4\3\4\0\16\3\1\164\17\3" +
                    "\2\0\4\3\4\0\1\165\7\3\1\166\10\3\1\167" +
                    "\14\3\2\0\4\3\4\0\1\170\12\3\1\171\22\3" +
                    "\2\0\4\3\4\0\21\3\1\172\14\3\2\0\4\3" +
                    "\4\0\5\3\1\173\30\3\2\0\4\3\4\0\3\3" +
                    "\1\174\32\3\2\0\4\3\4\0\5\3\1\175\30\3" +
                    "\2\0\4\3\4\0\11\3\3\176\22\3\2\0\4\3" +
                    "\4\0\10\3\1\177\25\3\2\0\4\3\4\0\6\3" +
                    "\1\161\27\3\2\0\4\3\4\0\7\3\1\200\26\3" +
                    "\2\0\4\3\4\0\3\3\1\201\32\3\2\0\4\3" +
                    "\4\0\5\3\1\202\7\3\1\203\20\3\2\0\4\3" +
                    "\4\0\5\3\1\204\13\3\1\205\14\3\2\0\4\3" +
                    "\4\0\2\3\1\206\12\3\1\207\20\3\2\0\4\3" +
                    "\4\0\10\3\1\210\25\3\2\0\4\3\4\0\20\3" +
                    "\1\211\2\3\1\212\12\3\2\0\4\3\4\0\23\3" +
                    "\1\213\12\3\2\0\4\3\4\0\21\3\1\214\14\3" +
                    "\2\0\4\3\4\0\2\3\1\141\33\3\2\0\4\3" +
                    "\4\0\6\3\1\215\27\3\2\0\4\3\4\0\21\3" +
                    "\1\216\14\3\2\0\4\3\4\0\1\3\1\217\34\3" +
                    "\2\0\4\3\4\0\16\3\1\220\17\3\2\0\4\3" +
                    "\4\0\6\3\1\221\27\3\2\0\4\3\4\0\14\3" +
                    "\1\222\21\3\2\0\4\3\4\0\15\3\1\223\20\3" +
                    "\2\0\4\3\4\0\2\3\1\224\13\3\1\225\5\3" +
                    "\1\226\11\3\2\0\4\3\4\0\23\3\1\227\12\3" +
                    "\2\0\4\3\4\0\21\3\1\230\14\3\2\0\4\3" +
                    "\4\0\6\3\1\231\27\3\2\0\4\3\4\0\4\3" +
                    "\1\232\3\3\1\155\25\3\2\0\4\3\4\0\1\3" +
                    "\1\42\1\3\1\56\5\3\1\157\24\3\2\0\4\3" +
                    "\4\0\6\3\1\161\7\3\1\163\17\3\2\0\4\3" +
                    "\4\0\16\3\1\233\17\3\2\0\4\3\4\0\13\3" +
                    "\1\171\22\3\2\0\4\3\4\0\23\3\1\234\12\3" +
                    "\2\0\4\3\4\0\1\3\1\176\10\3\2\176\22\3" +
                    "\2\0\4\3\4\0\4\3\1\232\3\3\1\235\25\3" +
                    "\2\0\4\3\4\0\10\3\1\236\25\3\2\0\4\3" +
                    "\4\0\1\3\1\237\1\3\1\56\5\3\1\157\24\3" +
                    "\2\0\4\3\4\0\5\3\1\240\13\3\1\241\14\3" +
                    "\2\0\4\3\4\0\1\3\1\176\7\3\1\176\1\3" +
                    "\1\176\22\3\2\0\4\3\4\0\10\3\1\242\25\3" +
                    "\2\0\4\3\4\0\16\3\1\164\4\3\1\243\12\3" +
                    "\2\0\2\3\1\244\1\3\4\0\1\3\1\245\3\3" +
                    "\1\246\12\3\1\245\1\247\14\3\2\0\4\3\4\0" +
                    "\21\3\1\250\14\3\2\0\4\3\4\0\3\3\1\251" +
                    "\1\3\1\175\1\252\10\3\1\253\1\3\1\231\14\3" +
                    "\2\0\4\3\4\0\2\176\1\3\1\176\5\3\2\176" +
                    "\1\3\1\176\21\3\2\0\4\3\4\0\10\3\1\254" +
                    "\25\3\2\0\4\3\4\0\23\3\1\212\12\3\2\0" +
                    "\4\3\4\0\13\3\1\255\22\3\2\0\4\3\4\0" +
                    "\6\3\1\227\27\3\2\0\4\3\4\0\1\256\5\3" +
                    "\1\257\27\3\2\0\4\3\4\0\1\3\1\260\13\3" +
                    "\1\261\20\3\2\0\4\3\4\0\1\3\1\262\34\3" +
                    "\2\0\4\3\4\0\6\3\1\263\27\3\2\0\4\3" +
                    "\4\0\6\3\1\264\27\3\2\0\4\3\4\0\6\3" +
                    "\1\265\27\3\2\0\4\3\4\0\3\3\1\266\22\3" +
                    "\1\267\7\3\2\0\4\3\4\0\23\3\1\176\12\3" +
                    "\2\0\4\3\4\0\15\3\1\270\20\3\2\0\4\3" +
                    "\4\0\15\3\1\271\20\3\2\0\4\3\4\0\23\3" +
                    "\1\272\12\3\2\0\4\3\4\0\10\3\1\273\2\3" +
                    "\1\274\22\3\2\0\4\3\4\0\6\3\1\263\5\3" +
                    "\1\275\21\3\2\0\4\3\4\0\15\3\1\176\20\3" +
                    "\2\0\4\3\4\0\3\3\1\276\32\3\2\0\4\3" +
                    "\4\0\15\3\1\277\20\3\2\0\4\3\4\0\1\300" +
                    "\35\3\2\0\4\3\4\0\3\3\1\301\32\3\2\0" +
                    "\4\3\4\0\21\3\1\302\14\3\2\0\4\3\4\0" +
                    "\2\3\1\157\33\3\2\0\4\3\4\0\11\3\1\176" +
                    "\24\3\2\0\4\3\4\0\5\3\1\303\30\3\2\0" +
                    "\4\3\4\0\10\3\1\304\25\3\2\0\4\3\4\0" +
                    "\1\3\1\176\13\3\1\176\20\3\2\0\4\3\4\0" +
                    "\14\3\1\176\21\3\2\0\4\3\4\0\1\3\1\176" +
                    "\34\3\2\0\4\3\4\0\2\3\1\164\33\3\2\0" +
                    "\4\3\4\0\27\3\1\305\6\3\2\0\4\3\4\0" +
                    "\20\3\1\277\15\3\2\0\2\3\1\306\1\3\4\0" +
                    "\36\3\2\0\4\3\4\0\17\3\1\176\16\3\2\0" +
                    "\4\3\4\0\5\3\1\176\30\3\2\0\4\3\4\0" +
                    "\4\3\1\176\1\3\1\307\27\3\2\0\4\3\4\0" +
                    "\7\3\1\147\26\3\2\0\4\3\4\0\20\3\1\176" +
                    "\15\3\2\0\4\3\4\0\21\3\1\310\14\3\2\0" +
                    "\4\3\4\0\15\3\1\311\20\3\2\0\4\3\4\0" +
                    "\6\3\1\312\27\3\2\0\4\3\4\0\6\3\1\307" +
                    "\27\3\2\0\4\3\4\0\2\3\1\313\33\3\2\0" +
                    "\4\3\4\0\26\3\1\314\7\3\2\0\4\3\4\0" +
                    "\10\3\1\315\25\3\2\0\4\3\4\0\6\3\1\316" +
                    "\27\3\2\0\4\3\4\0\13\3\1\317\22\3\2\0" +
                    "\4\3\4\0\15\3\1\320\20\3\2\0\4\3\4\0" +
                    "\21\3\1\321\14\3\2\0\4\3\4\0\16\3\1\322" +
                    "\17\3\2\0\4\3\4\0\5\3\1\323\30\3\2\0" +
                    "\4\3\4\0\1\324\5\3\1\325\27\3\2\0\4\3" +
                    "\4\0\7\3\1\326\26\3\2\0\4\3\4\0\13\3" +
                    "\1\327\22\3\2\0\4\3\4\0\6\3\1\330\27\3" +
                    "\2\0\4\3\4\0\4\3\1\331\31\3\2\0\4\3" +
                    "\4\0\5\3\1\332\30\3\2\0\4\3\4\0\1\3" +
                    "\1\333\34\3\2\0\4\3\4\0\10\3\1\334\25\3" +
                    "\2\0\4\3\4\0\21\3\1\335\14\3\2\0\4\3" +
                    "\4\0\5\3\1\331\30\3\2\0\2\3\1\336\1\3" +
                    "\4\0\36\3\2\0\4\3\4\0\5\3\1\277\30\3" +
                    "\2\0\4\3\4\0\11\3\1\337\24\3\2\0\4\3" +
                    "\4\0\5\3\1\340\30\3\2\0\4\3\4\0\23\3" +
                    "\1\341\12\3\2\0\4\3\4\0\14\3\1\337\21\3" +
                    "\2\0\2\3\1\342\1\3\4\0\32\3\1\343\3\3" +
                    "\2\0\4\3\4\0\21\3\1\344\14\3\2\0\4\3" +
                    "\4\0\2\3\1\345\33\3\2\0\4\3\4\0\3\3" +
                    "\1\225\4\3\1\156\25\3\2\0\4\3\4\0\1\3" +
                    "\1\346\34\3\2\0\4\3\4\0\2\3\1\303\33\3" +
                    "\2\0\4\3\4\0\21\3\1\347\14\3\2\0\4\3" +
                    "\4\0\1\3\1\350\34\3\2\0\4\3\4\0\2\3" +
                    "\1\351\10\3\1\352\22\3\2\0\4\3\4\0\5\3" +
                    "\2\176\27\3\2\0\4\3\4\0\30\3\1\176\5\3" +
                    "\2\0\4\3\4\0\5\3\1\176\2\3\1\353\5\3" +
                    "\1\354\17\3\2\0\4\3\4\0\1\176\35\3\2\0" +
                    "\4\3\4\0\6\3\1\355\27\3\2\0\4\3\4\0" +
                    "\5\3\1\356\30\3\2\0\4\3\4\0\10\3\1\357" +
                    "\25\3\2\0\4\3\4\0\1\3\1\360\4\3\1\361" +
                    "\27\3\2\0\4\3\4\0\11\3\1\362\24\3\2\0" +
                    "\4\3\4\0\10\3\1\363\25\3\2\0\4\3\4\0" +
                    "\16\3\1\364\17\3\2\0\4\3\4\0\16\3\1\225" +
                    "\17\3\2\0\4\3\4\0\2\3\1\365\33\3\2\0" +
                    "\4\3\4\0\2\3\1\366\33\3\2\0\4\3\4\0" +
                    "\3\3\1\367\6\3\1\370\23\3\2\0\4\3\4\0" +
                    "\10\3\1\176\25\3\2\0\4\3\4\0\13\3\1\371" +
                    "\22\3\2\0\4\3\4\0\6\3\1\372\27\3\2\0" +
                    "\4\3\4\0\2\3\1\373\33\3\2\0\4\3\4\0" +
                    "\2\3\1\374\33\3\2\0\4\3\4\0\4\3\1\375" +
                    "\31\3\2\0\4\3\4\0\32\3\1\176\3\3\2\0" +
                    "\4\3\4\0\6\3\1\376\27\3\2\0\4\3\4\0" +
                    "\17\3\1\377\16\3\2\0\4\3\4\0\1\3\1\316" +
                    "\34\3\2\0\4\3\4\0\3\3\1\331\32\3\2\0" +
                    "\4\3\4\0\27\3\1\u0100\6\3\2\0\4\3\4\0" +
                    "\6\3\1\u0101\27\3\2\0\4\3\4\0\3\3\1\u0102" +
                    "\32\3\2\0\4\3\4\0\1\3\1\331\34\3\2\0" +
                    "\4\3\4\0\15\3\1\172\20\3\2\0\4\3\4\0" +
                    "\16\3\1\u0103\17\3\2\0\4\3\4\0\11\3\1\u0104" +
                    "\24\3\2\0\4\3\4\0\3\3\1\u0105\32\3\2\0" +
                    "\4\3\4\0\10\3\1\u0106\25\3\2\0\4\3\4\0" +
                    "\15\3\1\u0107\20\3\2\0\4\3\4\0\24\3\1\u0108" +
                    "\11\3\2\0\4\3\4\0\6\3\1\u0109\27\3\2\0" +
                    "\4\3\4\0\13\3\1\u010a\22\3\2\0\4\3\4\0" +
                    "\1\u010b\20\3\1\167\14\3\2\0\4\3\4\0\6\3" +
                    "\1\277\27\3\2\0\4\3\4\0\2\3\1\u010c\33\3" +
                    "\2\0\4\3\4\0\3\3\1\u010d\32\3\2\0\4\3" +
                    "\4\0\15\3\1\331\20\3\2\0\4\3\4\0\7\3" +
                    "\1\u010e\26\3\2\0\4\3\4\0\7\3\1\u010f\26\3" +
                    "\2\0\4\3\4\0\10\3\1\346\25\3\2\0\4\3" +
                    "\4\0\6\3\1\u0110\27\3\2\0\4\3\4\0\13\3" +
                    "\1\u0111\22\3\2\0\4\3\4\0\21\3\1\u0112\14\3" +
                    "\2\0\4\3\4\0\5\3\1\u0113\30\3\2\0\4\3" +
                    "\4\0\26\3\1\276\7\3\2\0\4\3\4\0\3\3" +
                    "\1\u0114\32\3\2\0\4\3\4\0\1\u0115\35\3\2\0" +
                    "\4\3\4\0\1\3\1\227\34\3\2\0\4\3\4\0" +
                    "\15\3\1\u0116\20\3\2\0\4\3\4\0\1\3\1\176" +
                    "\16\3\1\176\15\3\2\0\4\3\4\0\22\3\1\u0117" +
                    "\13\3\2\0\2\3\1\342\1\3\4\0\36\3\2\0" +
                    "\4\3\4\0\3\3\1\u0118\32\3\2\0\4\3\4\0" +
                    "\6\3\1\277\2\3\1\176\24\3\2\0\4\3\4\0" +
                    "\11\3\1\331\24\3\2\0\4\3\4\0\3\3\1\u0119" +
                    "\32\3\2\0\4\3\4\0\5\3\1\u011a\30\3\2\0" +
                    "\4\3\4\0\1\u011b\35\3\2\0\4\3\4\0\1\u011c" +
                    "\35\3\2\0\4\3\4\0\21\3\1\u011d\14\3\2\0" +
                    "\4\3\4\0\1\3\1\164\34\3\2\0\4\3\4\0" +
                    "\2\3\1\u011e\33\3\2\0\4\3\4\0\15\3\1\u011f" +
                    "\20\3\2\0\4\3\4\0\27\3\1\u0120\6\3\2\0" +
                    "\4\3\4\0\5\3\1\u0121\30\3\2\0\4\3\4\0" +
                    "\3\3\1\u0122\32\3\2\0\4\3\4\0\20\3\1\225" +
                    "\15\3\2\0\4\3\4\0\15\3\1\u0123\20\3\2\0" +
                    "\4\3\4\0\15\3\1\u0124\20\3\2\0\4\3\4\0" +
                    "\15\3\1\u0125\20\3\2\0\4\3\4\0\6\3\1\u0126" +
                    "\27\3\2\0\4\3\4\0\6\3\1\u0127\27\3\2\0" +
                    "\4\3\4\0\13\3\1\u0128\22\3\2\0\4\3\4\0" +
                    "\17\3\1\225\16\3\2\0\4\3\4\0\4\3\1\u0129" +
                    "\2\3\1\u012a\26\3\2\0\4\3\4\0\15\3\1\u012b" +
                    "\20\3\2\0\4\3\4\0\4\3\1\u012c\31\3\2\0" +
                    "\4\3\4\0\13\3\1\u012d\22\3\2\0\4\3\4\0" +
                    "\5\3\1\u012e\30\3\2\0\4\3\4\0\2\3\1\u012f" +
                    "\33\3\2\0\4\3\4\0\1\u0130\35\3\2\0\4\3" +
                    "\4\0\2\3\1\u0131\33\3\2\0\4\3\4\0\6\3" +
                    "\1\u0132\27\3\2\0\4\3\4\0\23\3\1\u0113\12\3" +
                    "\2\0\4\3\4\0\24\3\1\u0133\11\3\2\0\4\3" +
                    "\4\0\6\3\1\u0134\27\3\2\0\4\3\4\0\26\3" +
                    "\1\176\7\3\2\0\4\3\4\0\2\3\1\u0135\33\3" +
                    "\2\0\4\3\4\0\1\3\1\u0136\34\3\2\0\4\3" +
                    "\4\0\2\3\1\u0137\33\3\2\0\4\3\4\0\1\331" +
                    "\35\3\2\0\4\3\4\0\6\3\1\331\27\3\2\0" +
                    "\4\3\4\0\6\3\1\u0138\27\3\2\0\4\3\4\0" +
                    "\7\3\1\176\26\3\2\0\4\3\4\0\10\3\1\u0139" +
                    "\25\3\2\0\4\3\4\0\5\3\1\206\30\3\2\0" +
                    "\4\3\4\0\10\3\1\u013a\25\3\2\0\4\3\4\0" +
                    "\2\3\1\u013b\33\3\2\0\4\3\4\0\11\3\1\276" +
                    "\24\3\2\0\4\3\4\0\3\3\1\u013c\32\3\2\0" +
                    "\4\3\4\0\13\3\1\u013d\22\3\2\0\4\3\4\0" +
                    "\2\3\1\u013e\33\3\2\0\4\3\4\0\1\u013f\35\3" +
                    "\2\0\4\3\4\0\31\3\2\176\3\3\2\0\4\3" +
                    "\4\0\6\3\1\u0140\27\3\2\0\4\3\4\0\6\3" +
                    "\1\u0141\27\3\2\0\4\3\4\0\4\3\1\u0142\31\3" +
                    "\2\0\4\3\4\0\4\3\1\u0143\31\3\2\0\4\3" +
                    "\4\0\4\3\1\u0144\31\3\2\0\4\3\4\0\21\3" +
                    "\1\u0145\14\3\2\0\4\3\4\0\21\3\1\u0146\14\3" +
                    "\2\0\4\3\4\0\12\3\1\u0147\23\3\2\0\4\3" +
                    "\4\0\5\3\1\u0148\30\3\2\0\4\3\4\0\2\3" +
                    "\1\u0149\33\3\2\0\4\3\4\0\6\3\1\u014a\27\3" +
                    "\2\0\4\3\4\0\11\3\1\u014b\24\3\2\0\4\3" +
                    "\4\0\21\3\1\176\14\3\2\0\4\3\4\0\20\3" +
                    "\1\276\15\3\2\0\4\3\4\0\13\3\1\u014c\22\3" +
                    "\2\0\4\3\4\0\2\3\1\u014d\33\3\2\0\4\3" +
                    "\4\0\5\3\1\u014e\30\3\2\0\4\3\4\0\5\3" +
                    "\1\u014f\30\3\2\0\4\3\4\0\10\3\1\u0150\25\3" +
                    "\2\0\4\3\4\0\15\3\1\u0151\20\3\2\0\4\3" +
                    "\4\0\5\3\1\u0152\30\3\2\0\4\3\4\0\6\3" +
                    "\1\u0153\27\3\2\0\4\3\4\0\1\u0154\35\3\2\0" +
                    "\4\3\4\0\6\3\1\225\27\3\2\0\4\3\4\0" +
                    "\2\3\1\u0155\33\3\2\0\4\3\4\0\21\3\1\u0156" +
                    "\14\3\2\0\2\3\1\u0157\1\3\4\0\36\3\2\0" +
                    "\4\3\4\0\21\3\1\u0158\14\3\2\0\2\3\1\u011d" +
                    "\1\3\4\0\36\3\2\0\4\3\4\0\1\u010b\35\3" +
                    "\2\0\4\3\4\0\5\3\1\u0159\30\3\2\0\4\3" +
                    "\4\0\6\3\1\u015a\27\3\2\0\4\3\4\0\16\3" +
                    "\1\u015b\17\3\2\0\4\3\4\0\15\3\1\u015c\20\3" +
                    "\2\0\4\3\4\0\15\3\1\u015d\20\3\2\0\4\3" +
                    "\4\0\21\3\1\u015e\14\3\2\0\4\3\4\0\26\3" +
                    "\1\u015f\7\3\2\0\4\3\4\0\5\3\1\u0160\30\3" +
                    "\2\0\4\3\4\0\6\3\1\u0161\27\3\2\0\4\3" +
                    "\4\0\1\3\1\35\34\3\2\0\2\3\1\u0162\1\3" +
                    "\4\0\36\3\2\0\2\3\1\u0163\1\3\4\0\36\3" +
                    "\2\0\4\3\4\0\5\3\1\u0164\30\3\2\0\4\3" +
                    "\4\0\23\3\1\u0165\12\3\2\0\4\3\4\0\23\3" +
                    "\1\u0166\12\3\2\0\4\3\4\0\16\3\1\354\17\3" +
                    "\2\0\4\3\4\0\1\u0167\35\3\2\0\4\3\4\0" +
                    "\2\3\1\u0168\33\3\2\0\4\3\4\0\3\3\1\u0169" +
                    "\5\3\1\u0104\1\3\1\u016a\3\3\1\u016b\16\3\2\0" +
                    "\4\3\4\0\21\3\1\277\14\3\2\0\4\3\4\0" +
                    "\15\3\1\70\20\3\2\0\2\3\1\u016c\1\3\4\0" +
                    "\36\3\2\0\4\3\4\0\1\3\1\225\34\3\2\0" +
                    "\4\3\4\0\6\3\1\u016d\27\3\2\0\4\3\4\0" +
                    "\1\3\1\157\34\3\2\0\4\3\4\0\4\3\1\u016e" +
                    "\31\3\2\0\4\3\4\0\3\3\1\u010b\32\3\2\0" +
                    "\4\3\4\0\2\3\1\u016f\33\3\2\0\4\3\4\0" +
                    "\6\3\1\u0170\27\3\2\0\4\3\4\0\6\3\1\u0171" +
                    "\27\3\2\0\4\3\4\0\6\3\1\u0172\27\3\2\0" +
                    "\4\3\4\0\3\3\1\u0156\32\3\2\0\4\3\4\0" +
                    "\6\3\1\176\27\3\2\0\4\3\4\0\31\3\1\176" +
                    "\1\3\1\176\2\3\2\0\4\3\4\0\2\3\1\u0173" +
                    "\33\3\2\0\4\3\4\0\21\3\1\u0174\14\3\2\0" +
                    "\4\3\4\0\13\3\1\u0175\22\3\2\0\4\3\4\0" +
                    "\15\3\1\225\20\3\2\0\4\3\4\0\10\3\1\u0176" +
                    "\25\3\2\0\4\3\4\0\5\3\1\u0177\30\3\2\0" +
                    "\4\3\4\0\5\3\1\204\30\3\2\0\4\3\4\0" +
                    "\13\3\1\u013e\22\3\2\0\4\3\4\0\21\3\1\u010b" +
                    "\14\3\2\0\4\3\4\0\1\u010d\35\3\2\0\4\3" +
                    "\4\0\31\3\3\176\2\3\2\0\4\3\4\0\4\3" +
                    "\1\u0178\24\3\3\176\1\3\1\176\2\0\4\3\4\0" +
                    "\21\3\1\u0179\14\3\2\0\4\3\4\0\5\3\1\246" +
                    "\13\3\1\172\14\3\2\0\4\3\4\0\1\3\1\245" +
                    "\3\3\1\246\12\3\1\245\1\172\14\3\2\0\4\3" +
                    "\4\0\5\3\1\u017a\30\3\2\0\4\3\4\0\1\225" +
                    "\35\3\2\0\4\3\4\0\6\3\1\u0127\14\3\1\u017b" +
                    "\12\3\2\0\4\3\4\0\21\3\1\u017c\14\3\2\0" +
                    "\4\3\4\0\13\3\1\u017d\22\3\2\0\4\3\4\0" +
                    "\1\u017e\35\3\2\0\4\3\4\0\13\3\1\250\22\3" +
                    "\2\0\4\3\4\0\14\3\1\213\21\3\2\0\4\3" +
                    "\4\0\24\3\1\176\11\3\2\0\4\3\4\0\5\3" +
                    "\1\147\30\3\2\0\4\3\4\0\5\3\1\157\30\3" +
                    "\2\0\4\3\4\0\5\3\1\346\30\3\2\0\4\3" +
                    "\4\0\4\3\1\u016d\31\3\2\0\4\3\4\0\20\3" +
                    "\1\u017f\15\3\2\0\4\3\4\0\10\3\1\u0180\25\3" +
                    "\2\0\4\3\4\0\21\3\1\u0181\14\3\2\0\4\3" +
                    "\4\0\21\3\1\u0152\1\u0182\13\3\2\0\4\3\4\0" +
                    "\31\3\1\176\4\3\2\0\4\3\4\0\6\3\1\276" +
                    "\27\3\2\0\4\3\4\0\10\3\1\u0183\25\3\2\0" +
                    "\4\3\4\0\5\3\1\u0184\30\3\2\0\4\3\4\0" +
                    "\6\3\1\u0185\27\3\2\0\4\3\4\0\15\3\1\u0186" +
                    "\20\3\2\0\4\3\4\0\10\3\1\u0187\25\3\2\0" +
                    "\4\3\4\0\6\3\1\u010d\27\3\2\0\4\3\4\0" +
                    "\21\3\1\u0188\14\3\2\0\4\3\4\0\13\3\1\u0189" +
                    "\22\3\2\0\4\3\4\0\13\3\1\u0156\22\3\2\0" +
                    "\4\3\4\0\12\3\1\176\23\3\2\0\4\3\4\0" +
                    "\1\u018a\35\3\2\0\4\3\4\0\5\3\1\u018b\30\3" +
                    "\2\0\4\3\4\0\6\3\1\u018c\27\3\2\0\4\3" +
                    "\4\0\4\3\1\u018d\31\3\2\0\2\3\1\u018e\1\3" +
                    "\4\0\36\3\2\0\4\3\4\0\25\3\1\u0172\10\3" +
                    "\2\0\4\3\4\0\13\3\1\165\22\3\2\0\4\3" +
                    "\4\0\15\3\1\u018f\20\3\2\0\4\3\4\0\16\3" +
                    "\1\165\17\3\2\0\4\3\4\0\23\3\1\u0190\12\3" +
                    "\2\0\4\3\4\0\23\3\1\u0191\12\3\2\0\4\3" +
                    "\4\0\12\3\1\u0192\23\3\2\0\4\3\4\0\10\3" +
                    "\1\u0193\25\3\2\0\4\3\4\0\2\3\1\u0194\33\3" +
                    "\2\0\4\3\4\0\2\3\1\u0195\33\3\2\0\4\3" +
                    "\4\0\21\3\1\u0196\14\3\2\0\4\3\4\0\15\3" +
                    "\1\u0197\20\3\2\0\4\3\4\0\1\172\35\3\2\0" +
                    "\4\3\4\0\5\3\1\u0131\30\3\2\0\4\3\4\0" +
                    "\2\3\1\u0198\33\3\2\0\4\3\4\0\4\3\1\u0199" +
                    "\31\3\2\0\2\3\1\u019a\1\3\4\0\36\3\2\0" +
                    "\4\3\4\0\1\u019b\35\3\2\0\4\3\4\0\10\3" +
                    "\1\u019c\25\3\2\0\4\3\4\0\16\3\1\u0131\17\3" +
                    "\1\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[16160];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\3\1\1\11\24\1\1\11\1\0\u0180\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[412];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /* user code: */
    public ASMDLTokenMaker() {
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, true);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addHyperlinkToken(int, int, int)
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, false);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array       The character array.
     * @param start       The starting offset in the array.
     * @param end         The ending offset in the array.
     * @param tokenType   The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     * @param hyperlink   Whether this token is a hyperlink.
     */
    public void addToken(char[] array, int start, int end, int tokenType,
                         int startOffset, boolean hyperlink) {
        super.addToken(array, start, end, tokenType, startOffset, hyperlink);
        zzStartRead = zzMarkedPos;
    }

    /**
     * Returns the text to place at the beginning and end of a
     * line to "comment" it in a this programming language.
     *
     * @return The start and end strings to add to a line to "comment"
     * it out.
     */
    public String[] getLineCommentStartAndEnd() {
        return new String[]{"#", null};
    }

    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text             The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset      The offset into the document at which
     *                         <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     * the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Refills the input buffer.
     *
     * @return <code>true</code> if EOF was reached, otherwise
     * <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }


    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public ASMDLTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public ASMDLTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 126) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = zzLexicalState;


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 10: {
                    addToken(Token.RESERVED_WORD);
                }
                case 11:
                    break;
                case 1: {
                    addToken(Token.IDENTIFIER);
                }
                case 12:
                    break;
                case 5: {
                    addToken(Token.COMMENT_EOL);
                    addNullToken();
                    return firstToken;
                }
                case 13:
                    break;
                case 7: {
                    addToken(Token.LITERAL_NUMBER_FLOAT);
                }
                case 14:
                    break;
                case 8: {
                    addToken(Token.FUNCTION);
                }
                case 15:
                    break;
                case 3: {
                    addToken(Token.WHITESPACE);
                }
                case 16:
                    break;
                case 9: {
                    addToken(Token.DATA_TYPE);
                }
                case 17:
                    break;
                case 2: {
                    addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 18:
                    break;
                case 6: {
                    addNullToken();
                    return firstToken;
                }
                case 19:
                    break;
                case 4: {
                    addToken(Token.SEPARATOR);
                }
                case 20:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case YYINITIAL: {
                                addNullToken();
                                return firstToken;
                            }
                            case 413:
                                break;
                            default:
                                return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
